// TODO: deploy smart contract with constructor
const keys = require("../config/keys")

const Tx = require("ethereumjs-tx")
const Web3 = require("web3")
const web3 = new Web3("https://ropsten.infura.io/" + keys.infura.ropsten_api_key)

const account1 = '0x6De84c79602B544Bed2a8e1611b830B93c084784'
const account2 = '0xA17884eb89141B41eb815986e26c450B5A8A84FF'

const privateKey1 = Buffer.from(process.env.PRIVATE_KEY_1, 'hex')
const privateKey2 = Buffer.from(process.env.PRIVATE_KEY_2, 'hex')

web3.eth.getTransactionCount(account1, (err, txCount) => {
    // Smart Contract bytecode, got it from Remix
    const data = '0x60806040526000600360006101000a81548160ff02191690831515021790555034801561002b57600080fd5b5060405161097538038061097583398101806040528101908080518201929190505050806000908051906020019061006492919061006b565b5050610110565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100ac57805160ff19168380011785556100da565b828001600101855582156100da579182015b828111156100d95782518255916020019190600101906100be565b5b5090506100e791906100eb565b5090565b61010d91905b808211156101095760008160009055506001016100f1565b5090565b90565b6108568061011f6000396000f30060806040526004361061008e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806314e6047c146100935780637221e6fc146100c25780639c184ee414610152578063bb5d40eb146101e2578063c3225d9214610211578063cf2cafa0146102a1578063ec59d36f14610322578063f376ed32146103a3575b600080fd5b34801561009f57600080fd5b506100a8610433565b604051808215151515815260200191505060405180910390f35b3480156100ce57600080fd5b506100d76104a2565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101175780820151818401526020810190506100fc565b50505050905090810190601f1680156101445780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561015e57600080fd5b50610167610540565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101a757808201518184015260208101905061018c565b50505050905090810190601f1680156101d45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101ee57600080fd5b506101f76105de565b604051808215151515815260200191505060405180910390f35b34801561021d57600080fd5b506102266105f1565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561026657808201518184015260208101905061024b565b50505050905090810190601f1680156102935780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102ad57600080fd5b50610308600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061068f565b604051808215151515815260200191505060405180910390f35b34801561032e57600080fd5b50610389600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506106b1565b604051808215151515815260200191505060405180910390f35b3480156103af57600080fd5b506103b86106ee565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103f85780820151818401526020810190506103dd565b50505050905090810190601f1680156104255780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b600080600360006101000a81548160ff0219169083151502179055506040805190810160405280600381526020017f58585800000000000000000000000000000000000000000000000000000000008152506002908051906020019061049a929190610785565b506001905090565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105385780601f1061050d57610100808354040283529160200191610538565b820191906000526020600020905b81548152906001019060200180831161051b57829003601f168201915b505050505081565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105d65780601f106105ab576101008083540402835291602001916105d6565b820191906000526020600020905b8154815290600101906020018083116105b957829003601f168201915b505050505081565b600360009054906101000a900460ff1681565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106875780601f1061065c57610100808354040283529160200191610687565b820191906000526020600020905b81548152906001019060200180831161066a57829003601f168201915b505050505081565b600081600190805190602001906106a7929190610785565b5060019050919050565b600081600290805190602001906106c9929190610785565b506001600360006101000a81548160ff02191690831515021790555060019050919050565b606060011515600360009054906101000a900460ff1615151415610749576040805190810160405280601581526020017f43657274696669636174652069732076616c69642100000000000000000000008152509050610782565b6040805190810160405280601781526020017f436572746966696361746520697320696e76616c69642100000000000000000081525090505b90565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106107c657805160ff19168380011785556107f4565b828001600101855582156107f4579182015b828111156107f35782518255916020019190600101906107d8565b5b5090506108019190610805565b5090565b61082791905b8082111561082357600081600090555060010161080b565b5090565b905600a165627a7a72305820b3fc21b76c573cf19c5ce847083f12b322f9ef1589e826b00a571b60f5ccee280029'

    const txObject = {
        nonce: web3.utils.toHex(txCount),
        gasLimit: web3.utils.toHex(1000000),
        gasPrice: web3.utils.toHex(web3.utils.toWei('10', 'gwei')),
        data: data
    }

    const tx = new Tx(txObject)
    tx.sign(privateKey1)

    const serializedTx = tx.serialize()
    const raw = '0x' + serializedTx.toString('hex')

    web3.eth.sendSignedTransaction(raw, (err, txHash) => {
        console.log('err:', err, 'txHash:', txHash)
    })
})